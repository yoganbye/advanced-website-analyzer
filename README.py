import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
from io import BytesIO
import time
from datetime import datetime
import json
import cv2
from bs4 import BeautifulSoup
import pytesseract
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(layout="wide", page_title="AI –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∞–π—Ç–æ–≤")
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—É—Ç—å

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'history' not in st.session_state:
    st.session_state.history = []
if 'competitors' not in st.session_state:
    st.session_state.competitors = {}

class AdvancedAnalyzer:
    def __init__(self):
        self.website_url = ""
        self.screenshot = None
        self.page_html = ""
        self.competitors_data = {}
        self.analysis_date = datetime.now()
        
        self.metrics = {
            'ux_ui': {
                '–í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è': {'value': 0, 'weight': 0.25},
                '–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞': {'value': 0, 'weight': 0.15},
                '–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞': {'value': 0, 'weight': 0.15},
                '–ù–∞–≤–∏–≥–∞—Ü–∏—è': {'value': 0, 'weight': 0.2},
                '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å': {'value': 0, 'weight': 0.25}
            },
            'seo': {
                '–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏': {'value': 0, 'weight': 0.3},
                'SEO-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ': {'value': 0, 'weight': 0.2},
                '–°–µ–º–∞–Ω—Ç–∏–∫–∞ HTML': {'value': 0, 'weight': 0.15},
                '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞': {'value': 0, 'weight': 0.2},
                '–°—Å—ã–ª–æ—á–Ω–∞—è –º–∞—Å—Å–∞': {'value': 0, 'weight': 0.15}
            },
            'content': {
                '–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞': {'value': 0, 'weight': 0.4},
                '–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å': {'value': 0, 'weight': 0.3},
                '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å': {'value': 0, 'weight': 0.3}
            }
        }
    
    def get_screenshot(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ API"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API —Ç–∏–ø–∞ ScreenshotLayer –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä
            response = requests.get(f"https://screenshotapi.net/api/v1/screenshot?url={url}&fresh=true&output=json")
            img_url = response.json().get('screenshot')
            img_response = requests.get(img_url)
            return Image.open(BytesIO(img_response.content))
        except:
            return Image.new('RGB', (800, 600), color='gray')
    
    def get_page_html(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            headers = {'User-Agent': 'Mozilla/5.0'}
            response = requests.get(url, headers=headers, timeout=10)
            return response.text
        except:
            return ""
    
    def analyze_with_lighthouse(self, url):
        """–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Lighthouse API (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Lighthouse API –∏–ª–∏ PageSpeed Insights
        time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        return {
            'performance': np.random.randint(30, 90),
            'accessibility': np.random.randint(40, 95),
            'best-practices': np.random.randint(50, 90),
            'seo': np.random.randint(40, 95)
        }
    
    def analyze_colors(self, image):
        """–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã —Å OpenCV"""
        img_array = np.array(image)
        img_array = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤
        hsv = cv2.cvtColor(img_array, cv2.COLOR_BGR2HSV)
        hist = cv2.calcHist([hsv], [0], None, [180], [0, 180])
        color_variety = np.count_nonzero(hist) / 180
        
        # –û—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        gray = cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)
        contrast = gray.std()
        
        score = min(100, (color_variety * 40 + contrast * 0.6))
        return max(20, score)
    
    def analyze_text(self, image):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å Tesseract OCR"""
        try:
            text = pytesseract.image_to_string(image)
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
            text_score = min(100, len(text) / 50)
            return max(30, text_score)
        except:
            return 50
    
    def analyze_seo_metadata(self, html):
        """–ê–Ω–∞–ª–∏–∑ SEO –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        soup = BeautifulSoup(html, 'html.parser')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤
        has_title = 1 if soup.title else 0
        has_meta_desc = 1 if soup.find('meta', attrs={'name': 'description'}) else 0
        has_h1 = 1 if soup.find('h1') else 0
        
        score = (has_title * 40 + has_meta_desc * 30 + has_h1 * 30)
        return score
    
    def analyze_competitors(self, main_url, competitors):
        """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏"""
        results = {}
        all_urls = [main_url] + competitors
        
        for url in all_urls:
            if url not in st.session_state.competitors:
                # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
                time.sleep(1)
                score = {
                    'total': np.random.randint(40, 85),
                    'speed': np.random.randint(30, 90),
                    'seo': np.random.randint(40, 80),
                    'ux': np.random.randint(50, 95)
                }
                st.session_state.competitors[url] = score
            results[url] = st.session_state.competitors[url]
        
        return results
    
    def full_analysis(self, url, competitors=[]):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞"""
        self.website_url = url
        self.analysis_date = datetime.now()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞..."):
            self.screenshot = self.get_screenshot(url)
            self.page_html = self.get_page_html(url)
            lighthouse_data = self.analyze_with_lighthouse(url)
            
            if competitors:
                self.competitors_data = self.analyze_competitors(url, competitors)
        
        # –ê–Ω–∞–ª–∏–∑ UX/UI
        with st.spinner("–ê–Ω–∞–ª–∏–∑ UX/UI..."):
            self.metrics['ux_ui']['–í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è']['value'] = lighthouse_data['accessibility']
            self.metrics['ux_ui']['–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞']['value'] = self.analyze_colors(self.screenshot)
            self.metrics['ux_ui']['–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞']['value'] = self.analyze_text(self.screenshot)
            self.metrics['ux_ui']['–ù–∞–≤–∏–≥–∞—Ü–∏—è']['value'] = 80 if len(self.page_html) > 5000 else 60  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
            self.metrics['ux_ui']['–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å']['value'] = lighthouse_data['best-practices']
        
        # –ê–Ω–∞–ª–∏–∑ SEO
        with st.spinner("–ê–Ω–∞–ª–∏–∑ SEO..."):
            self.metrics['seo']['–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏']['value'] = lighthouse_data['performance']
            self.metrics['seo']['SEO-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ']['value'] = self.analyze_seo_metadata(self.page_html)
            self.metrics['seo']['–°–µ–º–∞–Ω—Ç–∏–∫–∞ HTML']['value'] = lighthouse_data['seo']
            self.metrics['seo']['–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞']['value'] = 70  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
            self.metrics['seo']['–°—Å—ã–ª–æ—á–Ω–∞—è –º–∞—Å—Å–∞']['value'] = np.random.randint(20, 80)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞..."):
            self.metrics['content']['–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞']['value'] = min(100, len(self.page_html) / 300)
            self.metrics['content']['–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å']['value'] = np.random.randint(60, 95)
            self.metrics['content']['–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å']['value'] = 80  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        analysis_result = {
            'url': url,
            'date': self.analysis_date.strftime("%Y-%m-%d %H:%M"),
            'scores': {k: {m: v['value'] for m, v in cat.items()} 
                      for k, cat in self.metrics.items()},
            'competitors': competitors
        }
        st.session_state.history.append(analysis_result)
        
        return analysis_result

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("ü§ñ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä UX/UI –∏ SEO")
st.write("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –ø–æ 15+ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")

tab1, tab2, tab3 = st.tabs(["–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏", "–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"])

with tab1:
    with st.form("analysis_form"):
        url = st.text_input("URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", "https://example.com")
        competitors = st.text_area("URL –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):", "https://competitor1.com\nhttps://competitor2.com")
        submit_button = st.form_submit_button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
    
    if submit_button:
        analyzer = AdvancedAnalyzer()
        competitors_list = [c.strip() for c in competitors.split('\n') if c.strip()]
        result = analyzer.full_analysis(url, competitors_list)
        
        st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        st.image(analyzer.screenshot, caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç: {url}", use_column_width=True)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        # –û–±—â–∏–µ –æ—Ü–µ–Ω–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            ux_score = sum(v['value'] * v['weight'] for v in analyzer.metrics['ux_ui'].values())
            st.metric("–û–±—â–∏–π UX/UI", f"{ux_score:.1f}/100")
        with col2:
            seo_score = sum(v['value'] * v['weight'] for v in analyzer.metrics['seo'].values())
            st.metric("–û–±—â–∏–π SEO", f"{seo_score:.1f}/100")
        with col3:
            content_score = sum(v['value'] * v['weight'] for v in analyzer.metrics['content'].values())
            st.metric("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", f"{content_score:.1f}/100")
        
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        st.subheader("–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        for category, metrics in analyzer.metrics.items():
            st.write(f"#### {category.upper()}")
            df = pd.DataFrame.from_dict(metrics, orient='index')
            df = df.reset_index().rename(columns={'index': '–ú–µ—Ç—Ä–∏–∫–∞', 'value': '–û—Ü–µ–Ω–∫–∞'})
            
            fig = px.bar(df, x='–û—Ü–µ–Ω–∫–∞', y='–ú–µ—Ç—Ä–∏–∫–∞', orientation='h', 
                         text='–û—Ü–µ–Ω–∫–∞', color='–û—Ü–µ–Ω–∫–∞',
                         color_continuous_scale='RdYlGn',
                         range_color=[0, 100])
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.subheader("üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
        
        if ux_score < 70:
            st.warning("**UX/UI —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π:**")
            st.write("- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
            st.write("- –£–ø—Ä–æ—Å—Ç–∏—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–∞–π—Ç—É")
        
        if seo_score < 60:
            st.warning("**SEO —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π:**")
            st.write("- –£–≤–µ–ª–∏—á—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü")
            st.write("- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –º–µ—Ç–∞-—Ç–µ–≥–∏ (title, description)")
            st.write("- –£–ª—É—á—à–∏—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–º–µ—Ç–∫—É")
        
        if content_score < 50:
            st.warning("**–ö–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π:**")
            st.write("- –£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤")
            st.write("- –û–±–Ω–æ–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ")

with tab2:
    if hasattr(analyzer, 'competitors_data') and analyzer.competitors_data:
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏")
        
        competitors_df = pd.DataFrame.from_dict(analyzer.competitors_data, orient='index')
        competitors_df = competitors_df.reset_index().rename(columns={'index': '–°–∞–π—Ç'})
        
        fig = px.bar(competitors_df, x='–°–∞–π—Ç', y='total', color='–°–∞–π—Ç',
                     title='–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∞–π—Ç–æ–≤',
                     labels={'total': '–û–±—â–∏–π –±–∞–ª–ª'})
        st.plotly_chart(fig, use_container_width=True)
        
        # Radar chart –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        st.write("#### –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        radar_df = competitors_df.melt(id_vars=['–°–∞–π—Ç'], value_vars=['speed', 'seo', 'ux'],
                                     var_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', value_name='–û—Ü–µ–Ω–∫–∞')
        
        fig = px.line_polar(radar_df, r='–û—Ü–µ–Ω–∫–∞', theta='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 
                           color='–°–∞–π—Ç', line_close=True,
                           template='plotly_dark')
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")

with tab3:
    if st.session_state.history:
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤")
        
        for i, analysis in enumerate(st.session_state.history[::-1]):
            with st.expander(f"–ê–Ω–∞–ª–∏–∑ {analysis['url']} ({analysis['date']})"):
                st.write(f"**URL:** {analysis['url']}")
                st.write(f"**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {analysis['date']}")
                
                if analysis['competitors']:
                    st.write("**–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:**", ", ".join(analysis['competitors']))
                
                # –ö—Ä–∞—Ç–∫–∏–µ –æ—Ü–µ–Ω–∫–∏
                ux_score = sum(v * analyzer.metrics['ux_ui'][m]['weight'] 
                             for m, v in analysis['scores']['ux_ui'].items())
                seo_score = sum(v * analyzer.metrics['seo'][m]['weight'] 
                              for m, v in analysis['scores']['seo'].items())
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("UX/UI", f"{ux_score:.1f}/100")
                with col2:
                    st.metric("SEO", f"{seo_score:.1f}/100")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", key=f"details_{i}"):
                    st.write(analysis['scores'])
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.title("‚ÑπÔ∏è –û –±–æ—Ç–µ")
st.sidebar.write("""
–≠—Ç–æ—Ç AI –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å–∞–π—Ç—ã –ø–æ:
- **UX/UI –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º** (–¥–∏–∑–∞–π–Ω, —É–¥–æ–±—Å—Ç–≤–æ)
- **SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏** (–≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –ø–æ–∏—Å–∫–µ)
- **–ö–∞—á–µ—Å—Ç–≤—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞** (—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å)

–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è:
- Computer Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∑–∞–π–Ω–∞
- Lighthouse –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- NLP –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
""")

st.sidebar.download_button(
    label="–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞",
    data=json.dumps(st.session_state.history[-1] if st.session_state.history else {}),
    file_name="website_analysis_report.json",
    mime="application/json"
)
